/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MetaFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createMeta"
      | "i_MetaTokenContract"
      | "viewCloneAddress"
      | "viewCloneTotalSupply"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MetaCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createMeta",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "i_MetaTokenContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewCloneAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewCloneTotalSupply",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "createMeta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "i_MetaTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewCloneAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewCloneTotalSupply",
    data: BytesLike
  ): Result;
}

export namespace MetaCreatedEvent {
  export type InputTuple = [
    cloneAddress: AddressLike,
    contractId: BigNumberish,
    totalSupply: BigNumberish
  ];
  export type OutputTuple = [
    cloneAddress: string,
    contractId: bigint,
    totalSupply: bigint
  ];
  export interface OutputObject {
    cloneAddress: string;
    contractId: bigint;
    totalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MetaFactory extends BaseContract {
  connect(runner?: ContractRunner | null): MetaFactory;
  waitForDeployment(): Promise<this>;

  interface: MetaFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createMeta: TypedContractMethod<
    [setTotalSupply: BigNumberish],
    [string],
    "nonpayable"
  >;

  i_MetaTokenContract: TypedContractMethod<[], [string], "view">;

  viewCloneAddress: TypedContractMethod<[id: BigNumberish], [string], "view">;

  viewCloneTotalSupply: TypedContractMethod<
    [id: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createMeta"
  ): TypedContractMethod<
    [setTotalSupply: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "i_MetaTokenContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "viewCloneAddress"
  ): TypedContractMethod<[id: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "viewCloneTotalSupply"
  ): TypedContractMethod<[id: BigNumberish], [bigint], "view">;

  getEvent(
    key: "MetaCreated"
  ): TypedContractEvent<
    MetaCreatedEvent.InputTuple,
    MetaCreatedEvent.OutputTuple,
    MetaCreatedEvent.OutputObject
  >;

  filters: {
    "MetaCreated(address,uint256,uint256)": TypedContractEvent<
      MetaCreatedEvent.InputTuple,
      MetaCreatedEvent.OutputTuple,
      MetaCreatedEvent.OutputObject
    >;
    MetaCreated: TypedContractEvent<
      MetaCreatedEvent.InputTuple,
      MetaCreatedEvent.OutputTuple,
      MetaCreatedEvent.OutputObject
    >;
  };
}
